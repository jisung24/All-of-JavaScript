'use strict';
//============================= << 자료형(값이 중요해!) >> =============================
/**
 * ============= << Primitive vs Reference 메모리 동작 방식>> =============
 *  ##1. Primitive type(원시타입!) ==> 할당 1번만! 
    * - 변수가 tdz에서 벗어나면 즉 초기화가 되면, 임의의 메모리 공간에 변수 식별자를 넣는다.
    *   {ex) 1000번에 이름 : a , 값 : undefined } 
    * 
    * - 그럼 값이 할당이 되면 (a = 3) 할당이 된 값을 완전히 다른 메모리 5004번에 저장을 한다.
    * - 그리고 1000번의 값에는 3이 담겨져있는 메모리 주소값이 들어간다.
    * - 즉 선언변수와 할당 값은 완전히 분리를 시키고, 선언변수 값에는 할당값의 메모리 위치가 들어간다. 
    *
    * - let var같은 경우 재할당이 가능한데, 재할당 될 땐 재할당 된 값을 또 다른 5005번에 할당해주고,
    * - a의 값에다가 5005번의 주소값으로 바꿔준다.
    * ######## << 결론 >> ########
    * - 기본형은 값을 바꿀 때 초기화 된 변수의 값에 있는 주소값을 직접 바꾼다.  
    * 
    * ##2. 객체 type의 메모리 동작 방식!!(할당 여러 번!)
    * let stu; ==> 선언 && 초기화는 아까와 같아. 1002번에 이름과 값 공간을 확보시켜준다. 
    * 
    * 할당 : 5002번을 잡고 할당을 해주려고 보니까 객체는 값이 여러개야......
    * 5002다가 7001번부터 일단 좀 많이 확보를 해둔다.!!
    * 
    * 즉 값을 할당하기 위해 2군데를 확보해야해!!!(기본 타입은 1개의 할당만 확보해주면 돼!)
    * 1. 5002번은 여러개의 값을 넣기위한 공간.(7001번부터 여러 개!)
    * 2. 이제 a = 3을 할당을 해야함.
    * 3 좀 어려워................................
    * 
    * =================== << Primitive종류 >> ===================
    * 1. String(문자열) : 3가지 방식으로 쓸 수 있음(큰,작은,벡틱)
    * ==> 문자열은 프로그램을 만들다보면 정말 많이 쓴다.
    * ==> 사용자가 search_bar에 입력한 값을 처리한다거나... 등등. 
    * ==> id password 글자 수 제한걸기, 등등.
    * ==> 사용자가 건의.. 혹은 입력한 댓글, 
    * ==> 사용자는 글자를 쳐!!!! 그러니까 그게 다 문자열이야!!! 
    * 
    * 2. Number(숫자형) : 여러가지 연산을 사용해서 쓸 수 있음! 
    * ==> infinity(0으로 나누면!), 특히 NaN 예외 항상 염두해가면서 작성해야함!!
    * ==> String은 +밖에 쓸 수 없다! 
    * 
    * 3. Boolean(참,거짓) : if문에서 괄호 조건이 boolean형으로 바뀐다. 
    * ==> 어떤 식이나, 조건이 참이라면!
    * ==> id가 6글자 이상이 참이면~~
    * 
    * 4. Null : 안에 값이 없다!! 를 나타내주는 값. 완전 비어있어!
    * ==> 사용자가 입력한 search바에 값이 없다? ==> 아무것도 입력을 안 해줬을 때! 
    * 
    * 5. Undefined : 아직 초기화 이후에 할당이 안 됐어! 아직 값이 미정이야. 
    * 
    * 6. 추가!! typeof연산자
    * ==> 나중에 난 숫자연산을 하고싶은데 "3"처럼 문자열로 리턴해주는 함수를 계산하면,
    * ==> 중간에 type을 계속 확인하고싶을때가 있는데, 이럴 때 typeof연산자로 체크를 해준다.
    * ==> typeof null 하면 object라고 나오는데, 아님. 원시형이야!(버그야....!! )  
 */

{
    const name = "김지성";

    const message = `${name}님 합격하셨습니다!`;

    const age = 25;
    console.log(age/0); //Number type은 0으로 나누면 infinity란 값이 나온다!
    console.log(name / age); //NaN(Not a Number) 숫자가 아니다! 
    // ==> tip : Number type과 관련된 작업을 할 땐 항상 nan이 아닌지 염두하면서 작업해야함. 
}

const number = '지성'/3;
if(typeof number !== Number){
    console.log(`nan이야... 숫자 아니야!`);
}else{
    console.log('숫자 계산 잘 했네!');
}

{
    let age; //초기화까지!
    console.log(age);

    let user = null; //user값 없어! 
}
